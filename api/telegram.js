import { Telegraf, Markup, session } from 'telegraf';
import { ChartJSNodeCanvas } from 'chartjs-node-canvas';
import Chart from 'chart.js/auto/auto.js';
import annotationPlugin from 'chartjs-plugin-annotation';

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
const BOT_TOKEN = '8072367890:AAG2YD0mCajiB8JSstVuozeFtfosURGvzlk';
const bot = new Telegraf(BOT_TOKEN);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º session middleware ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
bot.use(session());

// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ ctx.session –≤—Å–µ–≥–¥–∞ –æ–±—ä–µ–∫—Ç
bot.use((ctx, next) => {
  if (!ctx.session) ctx.session = {};
  return next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è chartJSNodeCanvas —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–ª–∞–≥–∏–Ω–∞ annotation
const width = 800;
const height = 600;
const chartJSNodeCanvas = new ChartJSNodeCanvas({
  width,
  height,
  chartCallback: (ChartJS) => {
    ChartJS.register(annotationPlugin);
  },
});

// --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ---
const admins = [6824399168, 316971294]; // –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω

function isAdmin(ctx) {
  const id = ctx.from?.id;
  const result = admins.includes(id);
  console.log(`isAdmin check for ID ${id}: ${result}`);
  return result;
}

// --- –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –∫–ª—é—á–∏ ---
const licenseKeys = {
  // –ø—Ä–∏–º–µ—Ä: 'ABCD-1234-EFGH-5678': { used: false, userId: null },
};

// --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ ---
function generateLicenseKey() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let key = '';
  for (let block = 0; block < 4; block++) {
    if (block > 0) key += '-';
    for (let i = 0; i < 4; i++) {
      key += chars.charAt(Math.floor(Math.random() * chars.length));
    }
  }
  return key;
}

// --- –Ø–∑—ã–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---
const languages = {
  ru: {
    texts: {
      start: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
      enter_key: '–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞:',
      key_accepted: '–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É.',
      key_already_used: '–≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤–∞–º–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.',
      key_invalid: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
      use_buttons: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.',
      access_denied: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.',
      no_keys: '–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.',
      specify_count: '–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.',
      specify_key_del: '–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/delkey ABCD-1234-EFGH-5678',
      key_deleted: (key) => `–ö–ª—é—á ${key} —É–¥–∞–ª—ë–Ω.`,
      key_not_found: '–¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç.',
      keys_generated: (keys) => `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–∏:\n${keys.join('\n')}`,
      keys_list_header: '–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:\n',
      keys_list_item: (key, info) => `${key} ‚Äî ${info.used ? `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${info.userId})` : '–°–≤–æ–±–æ–¥–µ–Ω'}`,
      choose_lang: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language',
    }
  },
  en: {
    texts: {
      start: 'Welcome! Please choose a language:',
      enter_key: 'Please enter your license key to activate the bot:',
      key_accepted: 'Key accepted! You have successfully activated the bot. Now please choose a currency pair.',
      key_already_used: 'This key is already activated by you. Continuing.',
      key_invalid: 'Invalid or already used key. Please try again.',
      use_buttons: 'Please use buttons to interact with the bot.',
      access_denied: 'Access denied.',
      no_keys: 'No keys found.',
      specify_count: 'Specify a number from 1 to 20.',
      specify_key_del: 'Specify the key to delete, e.g.:\n/delkey ABCD-1234-EFGH-5678',
      key_deleted: (key) => `Key ${key} deleted.`,
      key_not_found: 'No such key.',
      keys_generated: (keys) => `Generated keys:\n${keys.join('\n')}`,
      keys_list_header: 'List of keys:\n',
      keys_list_item: (key, info) => `${key} ‚Äî ${info.used ? `Used (user ${info.userId})` : 'Free'}`,
      choose_lang: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language',
    }
  },
};

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
bot.start(async (ctx) => {
  ctx.session = ctx.session || {};
  ctx.session.authorized = false;
  ctx.session.lang = null;

  const chooseLangText = languages.ru.texts.choose_lang;

  await ctx.reply(chooseLangText, Markup.inlineKeyboard([
    Markup.button.callback('–†—É—Å—Å–∫–∏–π üá∑üá∫', 'lang_ru'),
    Markup.button.callback('English üá∫üá∏', 'lang_en'),
  ]));
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ---
bot.action(/lang_(.+)/, async (ctx) => {
  ctx.session = ctx.session || {};
  const lang = ctx.match[1];
  if (!languages[lang]) {
    await ctx.answerCbQuery('Unsupported language');
    return;
  }
  ctx.session.lang = lang;

  if (isAdmin(ctx)) {
    ctx.session.authorized = true;
  } else {
    ctx.session.authorized = false;
  }

  await ctx.answerCbQuery();

  const prompt = isAdmin(ctx)
    ? (languages[lang].texts.key_accepted)
    : languages[lang].texts.enter_key;

  if (isAdmin(ctx)) {
    await sendPairSelection(ctx, lang);
  } else {
    await ctx.editMessageText(prompt);
  }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞, –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ---
bot.on('text', async (ctx) => {
  ctx.session = ctx.session || {};
  const lang = ctx.session.lang || 'ru';
  const texts = languages[lang].texts;

  if (isAdmin(ctx)) {
    if (!ctx.session.authorized) ctx.session.authorized = true;
    return;
  }

  if (!ctx.session.authorized) {
    const inputKey = ctx.message.text.trim().toUpperCase();

    if (licenseKeys[inputKey] && !licenseKeys[inputKey].used) {
      licenseKeys[inputKey].used = true;
      licenseKeys[inputKey].userId = ctx.from.id;
      ctx.session.authorized = true;

      await ctx.reply(texts.key_accepted);

      if (typeof sendPairSelection === 'function') {
        await sendPairSelection(ctx, lang);
      }
    } else if (licenseKeys[inputKey] && licenseKeys[inputKey].userId === ctx.from.id) {
      ctx.session.authorized = true;
      await ctx.reply(texts.key_already_used);

      if (typeof sendPairSelection === 'function') {
        await sendPairSelection(ctx, lang);
      }
    } else {
      await ctx.reply(texts.key_invalid);
    }
    return;
  }

  await ctx.reply(texts.use_buttons);
});

// --- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---

bot.command('genkey', async (ctx) => {
  ctx.session = ctx.session || {};
  const lang = ctx.session.lang || 'ru';
  const texts = languages[lang].texts;

  console.log(`/genkey –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.id}`);

  if (!isAdmin(ctx)) {
    await ctx.reply(texts.access_denied);
    return;
  }

  const args = ctx.message.text.split(' ').slice(1);
  let count = 1;
  if (args.length > 0) {
    const parsed = parseInt(args[0], 10);
    if (!isNaN(parsed) && parsed > 0 && parsed <= 20) {
      count = parsed;
    } else {
      await ctx.reply(texts.specify_count);
      return;
    }
  }

  const newKeys = [];
  for (let i = 0; i < count; i++) {
    let key;
    do {
      key = generateLicenseKey();
    } while (licenseKeys[key]);

    licenseKeys[key] = { used: false, userId: null };
    newKeys.push(key);
  }

  console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–∏:', newKeys);

  await ctx.reply(texts.keys_generated(newKeys));
});

bot.command('listkeys', async (ctx) => {
  ctx.session = ctx.session || {};
  const lang = ctx.session.lang || 'ru';
  const texts = languages[lang].texts;

  console.log(`/listkeys –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.id}`);

  if (!isAdmin(ctx)) {
    await ctx.reply(texts.access_denied);
    return;
  }

  if (Object.keys(licenseKeys).length === 0) {
    await ctx.reply(texts.no_keys);
    return;
  }

  let message = texts.keys_list_header;
  for (const [key, info] of Object.entries(licenseKeys)) {
    message += texts.keys_list_item(key, info) + '\n';
  }

  await ctx.reply(message);
});

bot.command('delkey', async (ctx) => {
  ctx.session = ctx.session || {};
  const lang = ctx.session.lang || 'ru';
  const texts = languages[lang].texts;

  console.log(`/delkey –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.id}`);

  if (!isAdmin(ctx)) {
    await ctx.reply(texts.access_denied);
    return;
  }

  const args = ctx.message.text.split(' ').slice(1);
  if (args.length === 0) {
    await ctx.reply(texts.specify_key_del);
    return;
  }

  const key = args[0].toUpperCase();
  if (!licenseKeys[key]) {
    await ctx.reply(texts.key_not_found);
    return;
  }

  delete licenseKeys[key];
  await ctx.reply(texts.key_deleted(key));
});

// --- –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è sendPairSelection ---
async function sendPairSelection(ctx, lang) {
  const text = lang === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:' : 'Please choose a currency pair:';
  const buttons = Markup.inlineKeyboard([
    Markup.button.callback('BTC/USD', 'pair_btcusd'),
    Markup.button.callback('ETH/USD', 'pair_ethusd'),
  ]);
  await ctx.reply(text, buttons);
}

// --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
