import { Telegraf } from 'telegraf';
import axios from 'axios';
import { createCanvas } from 'canvas';
import { SMA, RSI, Stochastic } from 'technicalindicators';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã + OTC –≤–∞–ª—é—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
const CONFIG = {
  pocketOptionApi: 'https://api.pocketoption.com/api',
  botToken: '8072367890:AAG2YD0mCajiB8JSstVuozeFtfosURGvzlk',
  symbols: [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
    'EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD', 
    'USDCAD', 'USDCHF', 'NZDUSD', 'EURGBP',
    'EURJPY', 'GBPJPY', 'AUDJPY', 'EURCAD',
    'EURAUD', 'GBPAUD', 'GBPCAD', 'GBPCHF',
    
    // OTC –≤–∞–ª—é—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    'OTC:EURUSD', 'OTC:GBPUSD', 'OTC:USDJPY',
    'OTC:AUDUSD', 'OTC:USDCAD', 'OTC:USDCHF',
    'OTC:EURGBP', 'OTC:EURJPY', 'OTC:GBPJPY'
  ],
  timeframes: ['1m', '5m', '15m', '30m', '1h', '4h', '1d'],
  indicators: {
    smaShort: 5,
    smaLong: 15,
    rsi: 14,
    stochastic: { period: 14, signal: 3 }
  }
};

const bot = new Telegraf(CONFIG.botToken);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å PocketOption API
async function getPocketOptionData(symbol, timeframe) {
  try {
    // –ü—Ä–∏–º–µ—Ä URL, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π API
    const url = `${CONFIG.pocketOptionApi}/candles?symbol=${encodeURIComponent(symbol)}&timeframe=${timeframe}&limit=100`;
    const response = await axios.get(url);

    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ response.data.candles
    if (!response.data || !Array.isArray(response.data.candles)) {
      return [];
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç [{time, open, high, low, close, volume}, ...]
    return response.data.candles.map(c => ({
      time: c.time, // timestamp
      open: c.open,
      high: c.high,
      low: c.low,
      close: c.close,
      volume: c.volume,
    }));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å PocketOption:', error);
    return [];
  }
}

// –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–∞
function analyzeMarket(candles) {
  const closes = candles.map(c => c.close);

  const sma5 = SMA.calculate({ period: CONFIG.indicators.smaShort, values: closes }).slice(-1)[0] ?? closes[closes.length - 1];
  const sma15 = SMA.calculate({ period: CONFIG.indicators.smaLong, values: closes }).slice(-1)[0] ?? closes[closes.length - 1];
  const rsi = RSI.calculate({ period: CONFIG.indicators.rsi, values: closes }).slice(-1)[0] ?? 50;

  const stochasticInput = {
    period: CONFIG.indicators.stochastic.period,
    signalPeriod: CONFIG.indicators.stochastic.signal,
    high: candles.map(c => c.high),
    low: candles.map(c => c.low),
    close: closes,
  };
  const stochasticResults = Stochastic.calculate(stochasticInput);
  const stochastic = stochasticResults.slice(-1)[0] ?? { k: 50, d: 50 };

  // –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–¥: –µ—Å–ª–∏ sma5 > sma15 ‚Äî –≤–æ—Å—Ö–æ–¥—è—â–∏–π, –∏–Ω–∞—á–µ –Ω–∏—Å—Ö–æ–¥—è—â–∏–π
  const trend = sma5 > sma15 ? '–í–æ—Å—Ö–æ–¥—è—â–∏–π' : '–ù–∏—Å—Ö–æ–¥—è—â–∏–π';

  // –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
  const levels = findSupportResistance(candles);

  // –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã
  const signals = [];
  if (rsi > 70) signals.push('–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (RSI > 70)');
  else if (rsi < 30) signals.push('–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (RSI < 30)');
  if (stochastic.k > 80 && stochastic.d > 80) signals.push('–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (Stochastic)');
  if (stochastic.k < 20 && stochastic.d < 20) signals.push('–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (Stochastic)');

  return {
    price: closes[closes.length - 1],
    sma5,
    sma15,
    rsi,
    stochastic,
    trend,
    levels,
    signals,
  };
}

// –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π –º–µ—Ç–æ–¥)
function findSupportResistance(candles) {
  const highs = candles.map(c => c.high);
  const lows = candles.map(c => c.low);

  // –ù–∞–π–¥–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
  const levels = [];

  for (let i = 1; i < candles.length - 1; i++) {
    if (highs[i] > highs[i - 1] && highs[i] > highs[i + 1]) {
      levels.push({ type: 'resistance', value: highs[i] });
    }
    if (lows[i] < lows[i - 1] && lows[i] < lows[i + 1]) {
      levels.push({ type: 'support', value: lows[i] });
    }
  }

  // –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 5 –∑–Ω–∞–∫–æ–≤)
  const uniqueLevels = [];
  const set = new Set();

  for (const lvl of levels) {
    const key = `${lvl.type}-${lvl.value.toFixed(5)}`;
    if (!set.has(key)) {
      set.add(key);
      uniqueLevels.push(lvl);
    }
  }

  // –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ü–µ–Ω—ã
  uniqueLevels.sort((a, b) => a.value - b.value);

  return uniqueLevels;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é canvas
function generateChart(candles, symbol, timeframe, analysis) {
  const width = 800;
  const height = 400;
  const padding = 50;

  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext('2d');

  // –§–æ–Ω
  ctx.fillStyle = '#fff';
  ctx.fillRect(0, 0, width, height);

  // –†–∞—Å—Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
  const prices = candles.flatMap(c => [c.high, c.low]);
  const maxPrice = Math.max(...prices);
  const minPrice = Math.min(...prices);
  const priceRange = maxPrice - minPrice;

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–µ–π
  ctx.strokeStyle = '#000';
  ctx.lineWidth = 1;
  ctx.beginPath();
  ctx.moveTo(padding, padding);
  ctx.lineTo(padding, height - padding);
  ctx.lineTo(width - padding, height - padding);
  ctx.stroke();

  // –ü–æ–º–æ—â—å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç Y –ø–æ —Ü–µ–Ω–µ
  function priceToY(price) {
    return height - padding - ((price - minPrice) / priceRange) * (height - 2 * padding);
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–≤–µ—á–µ–π
  const candleWidth = (width - 2 * padding) / candles.length * 0.7;
  for (let i = 0; i < candles.length; i++) {
    const c = candles[i];
    const x = padding + (i + 0.15) * ((width - 2 * padding) / candles.length);

    const openY = priceToY(c.open);
    const closeY = priceToY(c.close);
    const highY = priceToY(c.high);
    const lowY = priceToY(c.low);

    // –¶–≤–µ—Ç —Å–≤–µ—á–∏
    const isBull = c.close >= c.open;
    ctx.fillStyle = isBull ? '#4caf50' : '#f44336';
    ctx.strokeStyle = ctx.fillStyle;

    // –¢–µ–ª–æ —Å–≤–µ—á–∏
    ctx.fillRect(x, Math.min(openY, closeY), candleWidth, Math.abs(closeY - openY));

    // –¢–µ–Ω–∏
    ctx.beginPath();
    ctx.moveTo(x + candleWidth / 2, highY);
    ctx.lineTo(x + candleWidth / 2, lowY);
    ctx.stroke();
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ SMA5 –∏ SMA15
  const closes = candles.map(c => c.close);
  const sma5 = SMA.calculate({ period: CONFIG.indicators.smaShort, values: closes });
  const sma15 = SMA.calculate({ period: CONFIG.indicators.smaLong, values: closes });

  function drawLine(data, color) {
    ctx.strokeStyle = color;
    ctx.lineWidth = 2;
    ctx.beginPath();
    for (let i = 0; i < data.length; i++) {
      const val = data[i];
      if (val === undefined) continue;
      const x = padding + ((i + (candles.length - data.length)) + 0.5) * ((width - 2 * padding) / candles.length);
      const y = priceToY(val);
      if (i === 0) ctx.moveTo(x, y);
      else ctx.lineTo(x, y);
    }
    ctx.stroke();
  }

  drawLine(sma5, '#2196f3'); // —Å–∏–Ω–∏–π - SMA5
  drawLine(sma15, '#ff9800'); // –æ—Ä–∞–Ω–∂–µ–≤—ã–π - SMA15

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
  ctx.strokeStyle = '#999';
  ctx.lineWidth = 1;
  ctx.setLineDash([5, 5]);
  ctx.font = '12px Arial';
  ctx.fillStyle = '#555';

  analysis.levels.forEach(level => {
    const y = priceToY(level.value);
    ctx.beginPath();
    ctx.moveTo(padding, y);
    ctx.lineTo(width - padding, y);
    ctx.stroke();
    ctx.fillText(
      (level.type === 'support' ? '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' : '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ') + ` ${level.value.toFixed(5)}`,
      padding + 5,
      y - 5
    );
  });

  ctx.setLineDash([]);

  // –ü–æ–¥–ø–∏—Å–∏
  ctx.fillStyle = '#000';
  ctx.font = '16px Arial';
  ctx.fillText(`${symbol} (${timeframe})`, padding, padding - 10);

  return canvas.toBuffer();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

bot.start((ctx) => {
  ctx.reply(
    `üìä –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏ OTC —Ä—ã–Ω–∫–∞ —Å PocketOption\n\n` +
    `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
    `/analyze [–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç] [—Ç–∞–π–º—Ñ—Ä–µ–π–º] - –ê–Ω–∞–ª–∏–∑ (–ø—Ä–∏–º–µ—Ä: /analyze EURUSD 1h –∏–ª–∏ /analyze OTC:EURUSD 15m)\n` +
    `/pairs - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n` +
    `/timeframes - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã\n\n` +
    `OTC –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–º–µ—á–µ–Ω—ã –ø—Ä–µ—Ñ–∏–∫—Å–æ–º OTC:`
  );
});

bot.command('pairs', (ctx) => {
  let message = `üí± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n\n`;
  message += `*–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã:*\n`;
  message += CONFIG.symbols.filter(s => !s.includes('OTC:')).join(', ') + '\n\n';
  message += `*OTC –≤–∞–ª—é—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:*\n`;
  message += CONFIG.symbols.filter(s => s.includes('OTC:')).join(', ');
  
  ctx.replyWithMarkdown(message);
});

bot.command('timeframes', (ctx) => {
  ctx.reply(`‚è≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:\n${CONFIG.timeframes.join(', ')}`);
});

bot.command('analyze', async (ctx) => {
  const args = ctx.message.text.split(' ');
  const symbol = args[1]?.toUpperCase();
  const timeframe = args[2];
  
  if (!symbol || !timeframe || !CONFIG.symbols.includes(symbol) || !CONFIG.timeframes.includes(timeframe)) {
    return ctx.replyWithMarkdown(
      `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n` +
      `/analyze [–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç] [—Ç–∞–π–º—Ñ—Ä–µ–π–º]\n` +
      `–ü—Ä–∏–º–µ—Ä—ã:\n` +
      `/analyze EURUSD 1h - –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞\n` +
      `/analyze OTC:EURUSD 15m - OTC –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n\n` +
      `–°–ø–∏—Å–∫–∏: /pairs –∏ /timeframes`
    );
  }

  try {
    const loadingMsg = await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const candles = await getPocketOptionData(symbol, timeframe);
    
    if (candles.length === 0) {
      await ctx.deleteMessage(loadingMsg.message_id);
      return ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞');
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    const analysis = analyzeMarket(candles);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    const chartBuffer = generateChart(candles.slice(-50), symbol, timeframe, analysis);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    let analysisText = `üìä *${symbol.replace('OTC:', '')} ${symbol.includes('OTC:') ? '(OTC)' : ''} (${timeframe})*\n`;
    analysisText += `üìà –¶–µ–Ω–∞: ${analysis.price.toFixed(5)}\n`;
    analysisText += `üî∑ –¢—Ä–µ–Ω–¥: ${analysis.trend}\n\n`;
    
    analysisText += `*–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:*\n`;
    analysisText += `- SMA5: ${analysis.sma5.toFixed(5)}\n`;
    analysisText += `- SMA15: ${analysis.sma15.toFixed(5)}\n`;
    analysisText += `- RSI: ${analysis.rsi.toFixed(2)} ${analysis.rsi > 70 ? 'üî¥' : analysis.rsi < 30 ? 'üü¢' : '‚ö™'}\n`;
    analysisText += `- Stochastic: K=${analysis.stochastic.k.toFixed(2)}, D=${analysis.stochastic.d.toFixed(2)}\n\n`;
    
    if (analysis.levels.length > 0) {
      analysisText += `*–£—Ä–æ–≤–Ω–∏:*\n`;
      analysis.levels.slice(0, 3).forEach(level => {
        const distance = ((analysis.price - level.value) / level.value * 100).toFixed(2);
        analysisText += `- ${level.type === 'support' ? 'üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞' : 'üöß –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ'}: ${level.value.toFixed(5)} (${distance}%)\n`;
      });
    }
    
    if (analysis.signals.length > 0) {
      analysisText += `\nüì¢ *–°–∏–≥–Ω–∞–ª—ã:*\n${analysis.signals.map(s => `‚Ä¢ ${s}`).join('\n')}\n`;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await ctx.deleteMessage(loadingMsg.message_id);
    await ctx.replyWithPhoto(
      { source: chartBuffer },
      { caption: analysisText, parse_mode: 'Markdown' }
    );
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–í–∞–ª—é—Ç—ã + OTC)');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
