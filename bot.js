import { Telegraf } from 'telegraf';
import axios from 'axios';

// –í–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É
function analyzeCandles(candles) {
  // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π close –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ‚Äî "–†–æ—Å—Ç", –∏–Ω–∞—á–µ "–ü–∞–¥–µ–Ω–∏–µ"
  if (candles.length < 2) return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.';
  const last = candles[candles.length - 1].close;
  const prev = candles[candles.length - 2].close;
  return last > prev ? '–¢—Ä–µ–Ω–¥: —Ä–æ—Å—Ç üìà' : '–¢—Ä–µ–Ω–¥: –ø–∞–¥–µ–Ω–∏–µ üìâ';
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ QuickChart
async function generateChartQuickChart(candles, symbol, timeframe) {
  const labels = candles.map(c => new Date(c.time).toLocaleTimeString());
  const prices = candles.map(c => c.close);

  const chartConfig = {
    type: 'line',
    data: {
      labels,
      datasets: [
        {
          label: `${symbol} Close Price`,
          data: prices,
          borderColor: 'rgba(33, 150, 243, 1)',
          backgroundColor: 'rgba(33, 150, 243, 0.2)',
          fill: true,
          tension: 0.1,
        },
      ],
    },
    options: {
      plugins: {
        title: {
          display: true,
          text: `${symbol} (${timeframe})`,
          font: { size: 18 },
        },
      },
      scales: {
        x: { display: true },
        y: { display: true },
      },
    },
  };

  const encodedConfig = encodeURIComponent(JSON.stringify(chartConfig));
  const url = `https://quickchart.io/chart?c=${encodedConfig}&format=png&width=800&height=400`;

  const response = await axios.get(url, { responseType: 'arraybuffer' });
  return Buffer.from(response.data, 'binary');
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
async function fetchCandles(symbol, timeframe) {
  // –ó–∞–≥–ª—É—à–∫–∞: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const now = Date.now();
  const candles = [];
  for (let i = 50; i > 0; i--) {
    candles.push({
      time: now - i * 60000, // –º–∏–Ω—É—Ç–∞ –Ω–∞–∑–∞–¥
      close: 100 + Math.sin(i / 5) * 5 + Math.random() * 2,
    });
  }
  return candles;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze
bot.command('analyze', async (ctx) => {
  try {
    // –†–∞–∑–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /analyze BTCUSDT 1m
    const args = ctx.message.text.split(' ');
    const symbol = args[1] || 'BTCUSDT';
    const timeframe = args[2] || '1m';

    const candles = await fetchCandles(symbol, timeframe);
    if (!candles || candles.length === 0) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–≤–µ—á–∞–º.');
    }

    const analysisText = analyzeCandles(candles);
    const chartBuffer = await generateChartQuickChart(candles, symbol, timeframe);

    await ctx.replyWithPhoto(
      { source: chartBuffer },
      { caption: analysisText, parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error(error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
  }
});

bot.launch();

console.log('Bot started');
