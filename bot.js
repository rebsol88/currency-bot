import { Telegraf, Markup } from 'telegraf';
import puppeteer from 'puppeteer';
import io from 'socket.io-client';

const BOT_TOKEN = '8072367890:AAG2YD0mCajiB8JSstVuozeFtfosURGvzlk';
const bot = new Telegraf(BOT_TOKEN);

class PocketOptionParser {
  constructor() {
    this.browser = null;
    this.page = null;
    this.quotes = new Map();
    this.watchedPairs = new Set([
      'EURUSD', 'GBPUSD', 'EURGBP', 'GBPJPY', 'EURJPY', 'USDJPY',
      'AUDCAD', 'NZDUSD', 'USDCHF', 'AUDUSD', 'USDCAD', 'AUDJPY',
      'GBPCAD', 'GBPCHF', 'GBPAUD', 'EURAUD', 'USDNOK', 'EURNZD', 'USDSEK'
    ]);
    this.isParsing = false;
    this.lastUpdate = null;
    this.updateInterval = null;

    // WebSocket
    this.socket = null;
    this.userId = '91717690'; // –∏–∑ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã—Ö
    this.userSecret = 'eea7f7588a9a0d84b68e0010a0026544'; // –∏–∑ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã—Ö
  }

  async init() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Pocket Option...');
      this.browser = await puppeteer.launch({ headless: true });
      this.page = await this.browser.newPage();
      await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
      console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
      return false;
    }
  }

  async connectWebSocket() {
    return new Promise((resolve, reject) => {
      this.socket = io('wss://api-msk.po.market', { transports: ['websocket'] });

      this.socket.on('connect', () => {
        console.log('WS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
        this.socket.emit('auth', {
          userId: this.userId,
          userSecret: this.userSecret,
        });
      });

      this.socket.on('auth_response', (data) => {
        if (data.success) {
          console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ WebSocket');
          resolve();
        } else {
          console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WebSocket:', data.message);
          reject(new Error(data.message));
        }
      });

      this.socket.on('price_update', (data) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º quotes Map
        const { symbol, bid, ask } = data;
        if (this.watchedPairs.has(symbol)) {
          const prev = this.quotes.get(symbol);
          const change = prev ? bid - prev.bid : 0;
          const changePercent = prev ? (change / prev.bid) * 100 : 0;
          this.quotes.set(symbol, { symbol, bid, ask, change, changePercent, timestamp: Date.now(), source: 'websocket' });
          this.lastUpdate = new Date();
          // –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –≤—ã–∑–≤–∞—Ç—å callback –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        }
      });

      this.socket.on('connect_error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', err);
      });

      this.socket.on('disconnect', () => {
        console.warn('WebSocket –æ—Ç–∫–ª—é—á—ë–Ω');
      });
    });
  }

  async parseQuotes() {
    if (this.isParsing) return;
    this.isParsing = true;
    try {
      console.log('üîç –ü–∞—Ä—Å–∏–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Å Pocket Option —á–µ—Ä–µ–∑ Puppeteer...');
      await this.page.goto('https://pocketoption.com/en/cabinet/quotes', { waitUntil: 'networkidle2', timeout: 30000 });
      await this.page.waitForSelector('.quotes-container, .asset-list, [data-qa="quotes-list"]', { timeout: 10000 }).catch(() => console.warn('‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'));

      const quotes = await this.page.evaluate((watchedPairs) => {
        const list = [];
        const els = document.querySelectorAll('.quote-item, .asset-item, [data-qa="quote-item"]');
        els.forEach(el => {
          const text = el.textContent || '';
          watchedPairs.forEach(pair => {
            if (text.includes(pair)) {
              const priceMatch = text.match(/(\d+\.\d{4,5})/g);
              if (priceMatch) {
                list.push({
                  symbol: pair,
                  price: parseFloat(priceMatch[0]),
                  bid: parseFloat(priceMatch[0]),
                  ask: parseFloat(priceMatch[1] || priceMatch[0])
                });
              }
            }
          });
        });
        return list;
      }, Array.from(this.watchedPairs));

      quotes.forEach(quote => {
        const prev = this.quotes.get(quote.symbol);
        const change = prev ? quote.price - prev.bid : 0;
        const changePercent = prev ? (change / prev.bid) * 100 : 0;
        this.quotes.set(quote.symbol, { symbol: quote.symbol, bid: parseFloat(quote.price.toFixed(5)), ask: parseFloat((quote.price + 0.0001).toFixed(5)), change: parseFloat(change.toFixed(5)), changePercent: parseFloat(changePercent.toFixed(2)), timestamp: Date.now(), source: 'pocket-option' });
      });

      this.lastUpdate = new Date();
      console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ ${quotes.length} –∫–æ—Ç–∏—Ä–æ–≤–æ–∫`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    } finally {
      this.isParsing = false;
    }
  }

  async startParsing() {
    const initialized = await this.init();
    if (!initialized) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä');
      return;
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await this.connectWebSocket();

    await this.parseQuotes();

    this.updateInterval = setInterval(async () => {
      // –ú–æ–∂–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏ —á–µ—Ä–µ–∑ Puppeteer (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      await this.parseQuotes();
    }, 30000);

    console.log('‚úÖ Pocket Option parser –∑–∞–ø—É—â–µ–Ω!');
  }
  
  stopParsing() {
    if (this.updateInterval) clearInterval(this.updateInterval);
    if (this.browser) this.browser.close();
    if (this.socket) this.socket.close();
  }

  getQuotes() {
    return Array.from(this.quotes.values());
  }

  addPair(pair) {
    this.watchedPairs.add(pair);
    this.parseQuotes();
  }

  removePair(pair) {
    this.watchedPairs.delete(pair);
    this.quotes.delete(pair);
  }

  getAvailablePairs() {
    const allPairs = [
      'EURUSD', 'GBPUSD', 'EURGBP', 'GBPJPY', 'EURJPY', 'USDJPY',
      'AUDCAD', 'NZDUSD', 'USDCHF', 'AUDUSD', 'USDCAD', 'AUDJPY',
      'GBPCAD', 'GBPCHF', 'GBPAUD', 'EURAUD', 'USDNOK', 'EURNZD', 'USDSEK'
    ];
    return allPairs.filter(p => !this.watchedPairs.has(p));
  }
}

const parser = new PocketOptionParser();

const displayNames = {
  EURUSD: { ru: 'EUR/USD' },
  GBPUSD: { ru: 'GBP/USD' },
  EURGBP: { ru: 'EUR/GBP' },
  GBPJPY: { ru: 'GBP/JPY' },
  EURJPY: { ru: 'EUR/JPY' },
  USDJPY: { ru: 'USD/JPY' },
  AUDCAD: { ru: 'AUD/CAD' },
  NZDUSD: { ru: 'NZD/USD' },
  USDCHF: { ru: 'USD/CHF' },
  AUDUSD: { ru: 'AUD/USD' },
  USDCAD: { ru: 'USD/CAD' },
  AUDJPY: { ru: 'AUD/JPY' },
  GBPCAD: { ru: 'GBP/CAD' },
  GBPCHF: { ru: 'GBP/CHF' },
  GBPAUD: { ru: 'GBP/AUD' },
  EURAUD: { ru: 'EUR/AUD' },
  USDNOK: { ru: 'USD/NOK' },
  EURNZD: { ru: 'EUR/NZD' },
  USDSEK: { ru: 'USD/SEK' }
};

function chunkArray(arr, size) {
  const result = [];
  for (let i = 0; i < arr.length; i += size) {
    result.push(arr.slice(i, i + size));
  }
  return result;
}

function formatTime(timestamp) {
  return new Date(timestamp).toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}

// --- Telegram Bot Commands ---

bot.start(async (ctx) => {
  const welcomeText = `
ü§ñ <b>Pocket Option Quotes Parser</b>
üìä –ü–∞—Ä—Å–µ—Ä –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –Ω–∞–ø—Ä—è–º—É—é —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Pocket Option
üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: 19 –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/quotes - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
/add - –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/remove - —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/list - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä
/help - –ø–æ–º–æ—â—å
‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  `;
  await ctx.reply(welcomeText, { parse_mode: 'HTML' });
});

bot.command('help', async (ctx) => {
  const helpText = `
üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ Pocket Option Parser:
üîπ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Pocket Option
‚Ä¢ 19 –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
üîπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã:
EURUSD, GBPUSD, EURGBP, GBPJPY, EURJPY, USDJPY,
AUDCAD, NZDUSD, USDCHF, AUDUSD, USDCAD, AUDJPY,
GBPCAD, GBPCHF, GBPAUD, EURAUD, USDNOK, EURNZD, USDSEK
üîπ –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /quotes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
‚Ä¢ /add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
‚Ä¢ /remove - —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
‚Ä¢ /list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä
  `;
  await ctx.reply(helpText, { parse_mode: 'HTML' });
});

bot.command('quotes', async (ctx) => {
  const quotes = parser.getQuotes();
  if (quotes.length === 0) {
    await ctx.reply('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —Å Pocket Option... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
    return;
  }
  let message = 'üìä <b>–ö–û–¢–ò–†–û–í–ö–ò POCKET OPTION</b>\n\n';
  quotes.forEach(quote => {
    const symbol = displayNames[quote.symbol]?.ru || quote.symbol;
    const emoji = quote.change >= 0 ? 'üìà' : 'üìâ';
    const sign = quote.change > 0 ? '+' : '';
    message += `${emoji} <b>${symbol}</b>\n`;
    message += `Bid: <code>${quote.bid}</code> | Ask: <code>${quote.ask}</code>\n`;
    message += `–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${sign}${quote.change} (${quote.changePercent}%)\n`;
    message += `–ò—Å—Ç–æ—á–Ω–∏–∫: ${quote.source}\n`;
    message += `–í—Ä–µ–º—è: ${formatTime(quote.timestamp)}\n\n`;
  });
  if (parser.lastUpdate) {
    message += `üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${formatTime(parser.lastUpdate)}`;
  }
  await ctx.reply(message, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'refresh_quotes')]
      ]
    }
  });
});

bot.action('refresh_quotes', async (ctx) => {
  await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª—è–µ–º...');
  await parser.parseQuotes();
  await bot.handleUpdate({ message: { text: '/quotes', chat: ctx.chat, from: ctx.from } });
});

bot.command('add', async (ctx) => {
  const availablePairs = parser.getAvailablePairs();
  if (availablePairs.length === 0) {
    await ctx.reply('‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è');
    return;
  }
  const buttons = availablePairs.map(pair =>
    Markup.button.callback(displayNames[pair]?.ru || pair, `add_${pair}`)
  );
  const keyboard = chunkArray(buttons, 3);
  await ctx.reply('‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', Markup.inlineKeyboard(keyboard));
});

bot.command('remove', async (ctx) => {
  const currentPairs = Array.from(parser.watchedPairs);
  if (currentPairs.length === 0) {
    await ctx.reply('‚ùå –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä');
    return;
  }
  const buttons = currentPairs.map(pair =>
    Markup.button.callback(displayNames[pair]?.ru || pair, `remove_${pair}`)
  );
  const keyboard = chunkArray(buttons, 3);
  await ctx.reply('‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', Markup.inlineKeyboard(keyboard));
});

bot.command('list', async (ctx) => {
  const currentPairs = Array.from(parser.watchedPairs);
  if (currentPairs.length === 0) {
    await ctx.reply('‚ùå –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä');
    return;
  }
  let message = 'üìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã:</b>\n\n';
  currentPairs.forEach(pair => {
    message += `‚Ä¢ ${displayNames[pair]?.ru || pair}\n`;
  });
  await ctx.reply(message, { parse_mode: 'HTML' });
});

bot.action(/add_(.+)/, async (ctx) => {
  const pair = ctx.match[1];
  parser.addPair(pair);
  await ctx.answerCbQuery(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${displayNames[pair]?.ru || pair}`);
  await ctx.reply(`‚úÖ –ü–∞—Ä–∞ ${displayNames[pair]?.ru || pair} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ`);
});

bot.action(/remove_(.+)/, async (ctx) => {
  const pair = ctx.match[1];
  parser.removePair(pair);
  await ctx.answerCbQuery(`‚ùå –£–¥–∞–ª–µ–Ω–æ: ${displayNames[pair]?.ru || pair}`);
  await ctx.reply(`‚ùå –ü–∞—Ä–∞ ${displayNames[pair]?.ru || pair} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`);
});

bot.on('text', async (ctx) => {
  const text = ctx.message.text.toUpperCase().replace('/', '');
  if (displayNames[text]) {
    const quote = parser.quotes.get(text);
    if (quote) {
      const symbol = displayNames[text]?.ru || text;
      const emoji = quote.change >= 0 ? 'üìà' : 'üìâ';
      const sign = quote.change > 0 ? '+' : '';
      const message = `
üìä <b>${symbol} (Pocket Option)</b>
üí∞ Bid: <code>${quote.bid}</code>
üí∞ Ask: <code>${quote.ask}</code>
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${sign}${quote.change} (${quote.changePercent}%)
üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${quote.source}
‚è∞ –í—Ä–µ–º—è: ${formatTime(quote.timestamp)}
      `;
      await ctx.reply(message, { parse_mode: 'HTML' });
    } else {
      await ctx.reply(`‚ùå –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è ${displayNames[text]?.ru || text} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
  }
});

async function startBot() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ Pocket Option Parser...');
  await parser.startParsing();
  bot.launch();
  console.log('‚úÖ Pocket Option Quotes Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  console.log('üìä –ü–∞—Ä—Å–∏–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Pocket Option');
}

// Graceful shutdown
process.once('SIGINT', async () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  parser.stopParsing();
  bot.stop('SIGINT');
  process.exit(0);
});
process.once('SIGTERM', async () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  parser.stopParsing();
  bot.stop('SIGTERM');
  process.exit(0);
});

startBot().catch(console.error);
